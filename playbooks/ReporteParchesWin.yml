---
#------------------------------- INICIALIZANDO ARCHIVO DE RESULTADOS
- name: StartUp for windows updates report
  hosts: localhost
  vars:
    start: "{" 
  gather_facts: false

  tasks:
  #------------------------------- LIMPIANDO ARCHIVOS TEMPORALES
    - set_fact: comando="if [ -f '/tmp/report_consolidado.json' ]; then rm $( ls /tmp/ | grep 'report_.*.json\|report_.*.xlsx\|report_.*.docx\|report_.*.png' | sed 's/report/\/tmp\/report/g' ) ; fi"

    - name: Cleaning previous tmp files
      command: bash -c "{{ comando }}"

    - name: Creation of Json File
      copy:
        content: "{{ start }}"
        dest: "/tmp/report_consolidado.json"
      delegate_to: 127.0.0.1

  #------------------------------- Creación de Work Order en BMC ITSM ambiente de desarrollo 
    - name: Create Work Order
      #delegate_to: awx-host
      delegate_to: 192.10.20.50
      remote_user: ubuntu
      register: wo
      shell: node /home/ubuntu/BMC/createWO.js --data '{"shortDescr":"Ticket creado automáticamente por AWX","detailedDescr":"Reporte de Actualizaciones Windows"}'

    - set_fact: comando="echo {{ wo.stdout }} | awk '{ print $3 }' | sed 's/id://g'"

    - name: Cleaning wo out 
      command: bash -c "{{ comando }}"
      register: wo_out

    - name: debug WO
      debug: var=wo_out.stdout

#------------------------------- GETTING UPDATES LIST
- name: Search Windows updates by category
  hosts: all
  vars:
    update_type: Updates
  gather_facts: false

  tasks:
    #---Extrallendo lista de updates
    - name: List Windows "{{ update_type }}"
      register: res
      win_updates:
        server_selection: managed_server
        category_names:
          - Application
          - Connectors
          - DefinitionUpdates
          - DeveloperKits
          - FeaturePacks
          - Guidance
          - ServicePacks
          - Tools
          - CriticalUpdates
          - SecurityUpdates
          - UpdateRollups
          - Updates
        log_path: C:\ansible_wu.txt

    - set_fact: archname="report_{{ inventory_hostname }}"
    - set_fact: archname_ext="/tmp/report_{{ inventory_hostname }}.json"

    #---Escribiendo Json por servidor
    - name: Create Json File for "{{ inventory_hostname }}"
      copy:
        content: "{{ res }}"
        dest: "{{ archname_ext }}"
      delegate_to: 127.0.0.1

    #---Escribiendo al Json conolidado
    - name: Write list to consolidated json
      lineinfile:
        line: " \"{{ inventory_hostname }}\": {{ res }} ,"
        insertafter: EOF
        dest: /tmp/report_consolidado.json
      delegate_to: 127.0.0.1

#------------------------------- CERRANDO ARCHIVO DE RESULTADOS
- name: Creation of report in docx, json transformation and sending of mail
  hosts: localhost
  vars:
    end: "}"
    para: "{{ destinatario }}"
    #para: <ebenitez@kionetworks.com>
    asunto: Reporte de Actualizaciones Windows {{ wo_out.stdout }}
    mensaje: vacio
  gather_facts: false

  tasks:
    # - name: Close json file
    #   lineinfile:
    #     line: "{{ end }}"
    #     insertafter: EOF
    #     dest: /tmp/report_consolidado.json
    #   delegate_to: 127.0.0.1
    
#------------------------------- REVISANDO MODULOS DE PYTHON A USAR
    - name: check and install python modules
      vars:
        testCommand: "{{ item.command }}"
        module: "{{ item.module }}"
      include_tasks: plays/pythonModules.yml
      with_items: 
        - { command: 'import docx', module: 'python-docx' }
        - { command: 'import matplotlib', module: 'matplotlib' }
        - { command: 'import faker', module: 'faker' }
        - { command: 'import pandas', module: 'pandas' }
        - { command: 'import plotly', module: 'plotly' }
        - { command: 'import kaleido', module: 'kaleido' }

#------------------------------- CONVIRTIENDO JSONs TO XLSX

    # - set_fact: comando="ls /tmp/ | grep 'report_.*.json' | while read -r line ; do out=$( echo $line | sed -e "s/json/xlsx/g" ); python3 plays/bin/json2xlsx.py /tmp/$line /tmp/$out ; done"

    # - name: Transform json files to xlsx
    #   command: bash -c "{{ comando }}"

#------------------------------- TRANSOFRMANDO CONSOLIDADO.JSON TO XLSX

    #- set_fact: inputfile="/tmp/report_consolidado.json" outputfile="/tmp/report_consolidado.xlsx"

    #- import_tasks: plays/json2xlsx.yml

# ------------------------------- CREANDO Y AÑADIENDO INFO AL DOCX

    - name: Añadiendo ifo al docx
      vars:
        inputfile: "plays/Plantilla_Vamos_Al_Futuro.docx"
        outputfile: "/tmp/report_actualizacionesWindows.docx"
        host: "{{ item }}"
        jsonfile: "/tmp/report_{{ item }}.json"
      include_tasks: plays/add2docx.yml
      with_items: "{{ groups['all'] }}"

# ------------------------------- CONVIRTIENDO WORD TO PDF

    - set_fact: comando="scp /tmp/report_actualizacionesWindows.docx ubuntu@192.10.20.50:/tmp/report_actualizacionesWindows.docx"

    - name: Copy report_actualizacionesWindows.docx to libreoffice Host
      command: bash -c "{{ comando }}"

    - set_fact: comando="ssh ubuntu@192.10.20.50 'soffice --headless --convert-to pdf /tmp/report_actualizacionesWindows.docx && docker cp /home/ubuntu/report_actualizacionesWindows.pdf  awx_task:/tmp/report_actualizacionesWindows.pdf'"

    - name: Converting to pdf and copy to localhost
      command: bash -c "{{ comando }}"

#------------------------------- ENVIANDO CORREO 
    #---Listando archivos
    #- set_fact: comando="list=$( ls /tmp/ | grep 'report_.*.json\|report_.*.xlsx\|report_.*.docx' | tr '\n' ',' | sed 's/report/\/tmp\/report/g' ) ; echo ${list::-1}"
    - set_fact: comando="list=$( ls /tmp/ | grep 'report_.*.pdf' | tr '\n' ',' | sed 's/report/\/tmp\/report/g' ) ; echo ${list::-1}"

    - name: Get files to send 
      command: bash -c "{{ comando }}"
      register: res
    
    - set_fact: mensaje="Reporte de actualizaciones Windows", adjuntos="{{ res.stdout }}"
    
    - import_tasks: plays/sendmail.yml

#------------------------------- LIMPIANDO ARCHIVOS TEMPORALES
    - set_fact: comando="rm $( ls /tmp/ | grep 'report_.*.json\|report_.*.xlsx\|report_.*.docx\|report_.*.png' | sed 's/report/\/tmp\/report/g' )"

    - name: Cleaning tmp files
      command: bash -c "{{ comando }}"
